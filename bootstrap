#!/usr/bin/env bash
# =============================================================================
# Dotfiles Bootstrap Script
# =============================================================================
# This script sets up a new machine from scratch with minimal dependencies
# Requirements: curl or wget, git
#
# Usage:
#   curl -fsSL https://raw.githubusercontent.com/bigdra50/dotfiles/main/bootstrap | bash
#   or
#   DOTFILES_DIR=$HOME/custom/path bash bootstrap

set -euo pipefail

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Configuration
DOTFILES_REPO="https://github.com/bigdra50/dotfiles.git"
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/dev/github.com/bigdra50/dotfiles}"
JUST_VERSION="1.16.0"

# Retry configuration
MAX_RETRIES=4
RETRY_DELAY=2

# =============================================================================
# Helper Functions
# =============================================================================

info() {
    echo -e "${BLUE}==>${NC} $1"
}

success() {
    echo -e "${GREEN}✓${NC} $1"
}

error() {
    echo -e "${RED}✗${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}!${NC} $1"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

detect_platform() {
    case "$(uname -s)" in
        Darwin*)
            echo "macos"
            ;;
        Linux*)
            if grep -qi microsoft /proc/version 2>/dev/null; then
                echo "wsl"
            else
                echo "linux"
            fi
            ;;
        MINGW*|MSYS*|CYGWIN*)
            echo "windows"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

detect_arch() {
    case "$(uname -m)" in
        x86_64|amd64)
            echo "x86_64"
            ;;
        aarch64|arm64)
            echo "aarch64"
            ;;
        *)
            echo "$(uname -m)"
            ;;
    esac
}

# Retry wrapper for network operations
retry_command() {
    local command=("$@")
    local attempt=1
    local delay=$RETRY_DELAY

    while [ $attempt -le $MAX_RETRIES ]; do
        if "${command[@]}"; then
            return 0
        else
            if [ $attempt -lt $MAX_RETRIES ]; then
                warning "Command failed (attempt $attempt/$MAX_RETRIES). Retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
                attempt=$((attempt + 1))
            else
                error "Command failed after $MAX_RETRIES attempts"
                return 1
            fi
        fi
    done
}

# =============================================================================
# Installation Functions
# =============================================================================

install_git() {
    if command_exists git; then
        success "git is already installed ($(git --version))"
        return 0
    fi

    info "Installing git..."

    case "$PLATFORM" in
        macos)
            # Git comes with Xcode Command Line Tools
            if ! xcode-select -p &>/dev/null; then
                info "Installing Xcode Command Line Tools..."
                xcode-select --install 2>/dev/null || true
                # Wait for installation
                until xcode-select -p &>/dev/null; do
                    sleep 5
                done
            fi
            ;;
        linux|wsl)
            if command_exists apt-get; then
                info "Installing git via apt-get..."
                retry_command sudo apt-get update
                retry_command sudo apt-get install -y git curl build-essential
            elif command_exists dnf; then
                info "Installing git via dnf..."
                retry_command sudo dnf install -y git curl gcc gcc-c++ make
            elif command_exists pacman; then
                info "Installing git via pacman..."
                retry_command sudo pacman -Syu --noconfirm git curl base-devel
            else
                error "No supported package manager found. Please install git manually."
                exit 1
            fi
            ;;
        *)
            error "Unsupported platform: $PLATFORM"
            exit 1
            ;;
    esac

    if command_exists git; then
        success "git installed successfully ($(git --version))"
    else
        error "Failed to install git"
        exit 1
    fi
}

install_just() {
    if command_exists just; then
        success "just is already installed ($(just --version))"
        return 0
    fi

    info "Installing just..."

    # Create local bin directory
    mkdir -p "$HOME/.local/bin"

    # Download and install just with retry
    if command_exists curl; then
        retry_command curl --proto '=https' --tlsv1.2 -sSfL https://just.systems/install.sh -o /tmp/just-install.sh
        bash /tmp/just-install.sh --to "$HOME/.local/bin"
        rm -f /tmp/just-install.sh
    elif command_exists wget; then
        retry_command wget -qO /tmp/just-install.sh https://just.systems/install.sh
        bash /tmp/just-install.sh --to "$HOME/.local/bin"
        rm -f /tmp/just-install.sh
    else
        error "Neither curl nor wget found. Please install curl or wget first."
        exit 1
    fi

    # Add to PATH for current session
    export PATH="$HOME/.local/bin:$PATH"

    if command_exists just; then
        success "just installed successfully ($(just --version))"
    else
        error "Failed to install just"
        exit 1
    fi
}

clone_dotfiles() {
    if [[ -d "$DOTFILES_DIR" ]]; then
        info "Dotfiles directory already exists at $DOTFILES_DIR"
        cd "$DOTFILES_DIR"

        # Check if it's a git repository
        if [[ -d .git ]]; then
            info "Updating existing repository..."

            # Ensure remote is set correctly
            current_remote=$(git remote get-url origin 2>/dev/null || echo "")
            if [[ -z "$current_remote" ]]; then
                git remote add origin "$DOTFILES_REPO"
            elif [[ "$current_remote" != "$DOTFILES_REPO" ]]; then
                warning "Remote URL mismatch. Updating to $DOTFILES_REPO"
                git remote set-url origin "$DOTFILES_REPO"
            fi

            # Pull latest changes with retry
            retry_command git pull --rebase origin main || {
                warning "Failed to pull latest changes. Continuing with existing version..."
            }
        else
            warning "Directory exists but is not a git repository. Skipping update."
        fi
    else
        info "Cloning dotfiles repository..."
        mkdir -p "$(dirname "$DOTFILES_DIR")"

        # Clone with retry
        retry_command git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
        cd "$DOTFILES_DIR"
    fi

    # Initialize submodules
    if [[ -f .gitmodules ]]; then
        info "Initializing git submodules..."
        retry_command git submodule update --init --recursive || {
            warning "Failed to initialize submodules. You may need to run 'just init-skills' later."
        }
    fi

    success "Dotfiles repository ready at $DOTFILES_DIR"
}

setup_shell_env() {
    info "Setting up shell environment..."
    
    # Ensure .local/bin is in PATH
    local shell_rc=""
    local path_line='export PATH="$HOME/.local/bin:$PATH"'
    
    # Determine shell config file
    if [[ -n "${SHELL:-}" ]]; then
        case "$SHELL" in
            */bash)
                shell_rc="$HOME/.bashrc"
                ;;
            */zsh)
                shell_rc="$HOME/.zshrc"
                ;;
        esac
    fi
    
    # Also check for common shell configs
    for rc in "$HOME/.bashrc" "$HOME/.zshrc"; do
        if [[ -f "$rc" ]]; then
            # Check if PATH is already set correctly
            if ! grep -q '\.local/bin' "$rc" 2>/dev/null; then
                echo "$path_line" >> "$rc"
                success "Added ~/.local/bin to PATH in $rc"
            else
                success "PATH already configured in $rc"
            fi
        fi
    done
    
    # Export for current session
    export PATH="$HOME/.local/bin:$PATH"
}

verify_installation() {
    info "Verifying installation..."

    local errors=0

    # Check essential commands
    for cmd in git just; do
        if command_exists "$cmd"; then
            success "$cmd is available"
        else
            error "$cmd is not available"
            errors=$((errors + 1))
        fi
    done

    # Check dotfiles directory
    if [[ -d "$DOTFILES_DIR" ]]; then
        success "Dotfiles directory exists"
    else
        error "Dotfiles directory not found"
        errors=$((errors + 1))
    fi

    # Check if .zshrc was created
    if [[ -L "$HOME/.zshrc" ]] || [[ -f "$HOME/.zshrc" ]]; then
        success ".zshrc is configured"
    else
        warning ".zshrc not found (this may be expected on some systems)"
    fi

    if [[ $errors -eq 0 ]]; then
        success "All checks passed!"
        return 0
    else
        error "$errors check(s) failed"
        return 1
    fi
}

show_summary() {
    echo ""
    echo -e "${CYAN}╔════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}  ${GREEN}✨ Bootstrap Completed Successfully!${NC}        ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════╝${NC}"
    echo ""
    echo -e "${BLUE}📍 Installation Summary:${NC}"
    echo "  Platform:      $PLATFORM ($ARCH)"
    echo "  Dotfiles Dir:  $DOTFILES_DIR"
    echo "  Shell:         $SHELL"
    echo ""
    echo -e "${BLUE}📝 Next Steps:${NC}"
    echo "  1. Restart your shell or run:"
    echo -e "     ${YELLOW}source ~/.zshrc${NC}"
    echo ""
    echo "  2. (Optional) Initialize skills submodule:"
    echo -e "     ${YELLOW}just init-skills${NC}"
    echo ""
    echo "  3. Customize your local settings if needed:"
    echo "     ~/.zshrc_local, ~/.gitconfig_local"
    echo ""

    # Platform-specific tips
    case "$PLATFORM" in
        wsl)
            echo -e "${BLUE}💡 WSL-specific tips:${NC}"
            echo "  - Windows PATH is automatically integrated"
            echo "  - Use 'git config --global core.autocrlf input' for line endings"
            echo ""
            ;;
        macos)
            if [[ "$ARCH" == "aarch64" ]]; then
                echo -e "${BLUE}💡 Apple Silicon tips:${NC}"
                echo "  - Homebrew is installed at /opt/homebrew"
                echo "  - Some tools may need Rosetta 2"
                echo ""
            fi
            ;;
    esac

    # Offer to switch to zsh if not already using it
    if [[ "$SHELL" != */zsh ]] && command_exists zsh; then
        echo -e "${YELLOW}💡 Tip: Switch to zsh with:${NC}"
        echo "   chsh -s $(which zsh)"
        echo ""
    fi
}

# =============================================================================
# Main Bootstrap Process
# =============================================================================

main() {
    local start_time=$(date +%s)

    echo ""
    echo -e "${CYAN}╔════════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC}  ${BLUE}🚀 Dotfiles Bootstrap${NC}                     ${CYAN}║${NC}"
    echo -e "${CYAN}╚════════════════════════════════════════════════╝${NC}"
    echo ""

    # Detect platform
    PLATFORM=$(detect_platform)
    ARCH=$(detect_arch)
    info "Detected platform: $PLATFORM ($ARCH)"

    if [[ "$PLATFORM" == "unknown" ]]; then
        error "Unsupported operating system"
        exit 1
    fi

    # Check prerequisites
    info "Checking prerequisites..."
    if ! command_exists curl && ! command_exists wget; then
        error "Neither curl nor wget found. Please install one of them first."
        exit 1
    fi

    echo ""

    # Step 1: Install git if needed
    info "Step 1/5: Installing git..."
    install_git
    echo ""

    # Step 2: Clone dotfiles
    info "Step 2/5: Cloning dotfiles repository..."
    clone_dotfiles
    echo ""

    # Step 3: Install just
    info "Step 3/5: Installing just command runner..."
    install_just
    echo ""

    # Step 4: Setup shell environment
    info "Step 4/5: Setting up shell environment..."
    setup_shell_env
    echo ""

    # Step 5: Run just init
    info "Step 5/5: Running dotfiles initialization..."
    cd "$DOTFILES_DIR"

    # Run in non-interactive mode for bootstrap
    export INTERACTIVE=false

    if just init; then
        success "Dotfiles initialization completed!"
    else
        error "Dotfiles initialization failed"
        warning "You can try running 'just init' manually to see detailed errors"
        exit 1
    fi

    echo ""

    # Verify installation
    verify_installation

    # Show summary
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))

    echo ""
    info "Bootstrap completed in ${duration}s"

    show_summary
}

# Run main function
main "$@"