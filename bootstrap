#!/usr/bin/env bash
# =============================================================================
# Dotfiles Bootstrap Script
# =============================================================================
# This script sets up a new machine from scratch with minimal dependencies
# Requirements: curl or wget, git

set -euo pipefail

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
DOTFILES_REPO="https://github.com/bigdra50/dotfiles.git"
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/.ghq/github.com/bigdra50/dotfiles}"
JUST_VERSION="1.16.0"

# =============================================================================
# Helper Functions
# =============================================================================

info() {
    echo -e "${BLUE}==>${NC} $1"
}

success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

error() {
    echo -e "${RED}âœ—${NC} $1" >&2
}

warning() {
    echo -e "${YELLOW}!${NC} $1"
}

command_exists() {
    command -v "$1" >/dev/null 2>&1
}

detect_os() {
    case "$(uname -s)" in
        Linux*)
            if grep -qi microsoft /proc/version 2>/dev/null; then
                echo "wsl"
            else
                echo "linux"
            fi
            ;;
        Darwin*)
            echo "macos"
            ;;
        *)
            echo "unknown"
            ;;
    esac
}

# =============================================================================
# Installation Functions
# =============================================================================

install_git() {
    if command_exists git; then
        return 0
    fi

    info "Installing git..."
    
    case "$(detect_os)" in
        macos)
            # Git comes with Xcode Command Line Tools
            xcode-select --install 2>/dev/null || true
            ;;
        linux|wsl)
            if command_exists apt-get; then
                sudo apt-get update && sudo apt-get install -y git
            elif command_exists yum; then
                sudo yum install -y git
            elif command_exists pacman; then
                sudo pacman -S --noconfirm git
            else
                error "Could not install git. Please install it manually."
                exit 1
            fi
            ;;
    esac
}

install_just() {
    if command_exists just; then
        success "just is already installed"
        return 0
    fi

    info "Installing just..."
    
    # Create local bin directory
    mkdir -p "$HOME/.local/bin"
    
    # Download and install just
    if command_exists curl; then
        curl --proto '=https' --tlsv1.2 -sSfL https://just.systems/install.sh | \
            bash -s -- --to "$HOME/.local/bin"
    elif command_exists wget; then
        wget -qO- https://just.systems/install.sh | \
            bash -s -- --to "$HOME/.local/bin"
    else
        error "Neither curl nor wget found. Please install one of them."
        exit 1
    fi
    
    # Add to PATH for current session
    export PATH="$HOME/.local/bin:$PATH"
    
    success "just installed successfully"
}

clone_dotfiles() {
    if [[ -d "$DOTFILES_DIR" ]]; then
        info "Dotfiles directory already exists. Updating..."
        cd "$DOTFILES_DIR"
        git pull
    else
        info "Cloning dotfiles repository..."
        mkdir -p "$(dirname "$DOTFILES_DIR")"
        git clone "$DOTFILES_REPO" "$DOTFILES_DIR"
    fi
    
    success "Dotfiles repository ready"
}

setup_shell_env() {
    info "Setting up shell environment..."
    
    # Ensure .local/bin is in PATH
    local shell_rc=""
    local path_line='export PATH="$HOME/.local/bin:$PATH"'
    
    # Determine shell config file
    if [[ -n "${SHELL:-}" ]]; then
        case "$SHELL" in
            */bash)
                shell_rc="$HOME/.bashrc"
                ;;
            */zsh)
                shell_rc="$HOME/.zshrc"
                ;;
        esac
    fi
    
    # Also check for common shell configs
    for rc in "$HOME/.bashrc" "$HOME/.zshrc"; do
        if [[ -f "$rc" ]]; then
            # Check if PATH is already set correctly
            if ! grep -q '\.local/bin' "$rc" 2>/dev/null; then
                echo "$path_line" >> "$rc"
                success "Added ~/.local/bin to PATH in $rc"
            else
                success "PATH already configured in $rc"
            fi
        fi
    done
    
    # Export for current session
    export PATH="$HOME/.local/bin:$PATH"
}

# =============================================================================
# Main Bootstrap Process
# =============================================================================

main() {
    echo "ðŸš€ Dotfiles Bootstrap"
    echo "===================="
    
    # Detect OS
    local os=$(detect_os)
    info "Detected OS: $os"
    
    if [[ "$os" == "unknown" ]]; then
        error "Unsupported operating system"
        exit 1
    fi
    
    # Step 1: Install git if needed
    install_git
    
    # Step 2: Clone dotfiles
    clone_dotfiles
    
    # Step 3: Install just
    install_just
    
    # Step 4: Setup shell environment
    setup_shell_env
    
    # Step 5: Run just init
    info "Running dotfiles initialization..."
    cd "$DOTFILES_DIR"
    
    # Run in non-interactive mode for bootstrap
    export INTERACTIVE=false
    
    if just init; then
        success "Dotfiles initialization completed!"
    else
        error "Dotfiles initialization failed"
        exit 1
    fi
    
    echo ""
    echo "âœ¨ Bootstrap completed!"
    echo ""
    echo "Next steps:"
    echo "1. Restart your shell or run: source ~/.zshrc"
    echo "2. Customize your local settings if needed"
    echo ""
    
    # Offer to switch to zsh if not already using it
    if [[ "$SHELL" != */zsh ]] && command_exists zsh; then
        echo "ðŸ’¡ Tip: You can switch to zsh with: chsh -s $(which zsh)"
    fi
}

# Run main function
main "$@"